name: Build Linux and Windows Packages (Fixed)

on: [push]

jobs:
  build_sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.9"
      - name: Install dependencies
        run: |
          # 先安装旧版本 pip，再分步升级
          python -m pip install --disable-pip-version-check pip==23.0.1
          python -m pip install --upgrade pip setuptools wheel build pybind11
      - name: Build sdist
        run: python -m build --sdist --no-isolation
      - name: Upload sdist
        uses: actions/upload-artifact@v4
        with:
          name: sdist-package
          path: dist/*.tar.gz

  build_wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # Windows 安装编译工具
      - name: Install C++ build tools (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          choco install visualstudio2022-workload-vctools -y

      # 分步安装依赖，避免 pip 升级冲突
      - name: Install dependencies
        run: |
          # 先安装基础依赖
          python -m pip install --disable-pip-version-check pip==23.0.1
          python -m pip install setuptools wheel build pybind11
          # 再单独升级 pip（可选）
          python -m pip install --upgrade pip

      # 构建步骤（保持不变）
      - name: Build Wheel
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            export CXXFLAGS="-std=c++11 -pthread"
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            export CFLAGS="/MT"
            export CXXFLAGS="/MT /EHsc"
          fi
          python -m build --wheel --no-isolation
      - name: Upload Wheel
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
          path: dist/*.whl

  build_manylinux_wheels:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build manylinux wheels
        uses: pypa/cibuildwheel@v2.16.2
        env:
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-*"
          CIBW_ARCHS: "x86_64"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux2014
          CIBW_BEFORE_BUILD: "pip install pybind11"
          CIBW_ENVIRONMENT: "CXXFLAGS='-std=c++11 -pthread'"
      - name: Upload manylinux Wheels
        uses: actions/upload-artifact@v4
        with:
          name: manylinux-wheels
          path: wheelhouse/*.whl